{"ast":null,"code":"import axios from 'axios';\n\n// API 기본 URL (서버 포트로 변경)\nconst API_BASE_URL = process.env.REACT_APP_API_URL || 'http://localhost:5000/api';\n\n// axios 인스턴스 생성\nconst api = axios.create({\n  baseURL: API_BASE_URL,\n  headers: {\n    'Content-Type': 'application/json'\n  }\n});\n\n// 요청 인터셉터 (토큰 추가)\napi.interceptors.request.use(config => {\n  const token = localStorage.getItem('token');\n  if (token) {\n    config.headers.Authorization = `Bearer ${token}`;\n  }\n  return config;\n}, error => {\n  return Promise.reject(error);\n});\n\n// 응답 인터셉터 (에러 처리)\napi.interceptors.response.use(response => response, error => {\n  var _error$response;\n  if (((_error$response = error.response) === null || _error$response === void 0 ? void 0 : _error$response.status) === 401) {\n    localStorage.removeItem('token');\n    localStorage.removeItem('user');\n    window.location.href = '/login';\n  }\n  return Promise.reject(error);\n});\n\n// 사용자 관련 API\nexport const userAPI = {\n  // 회원가입\n  register: userData => api.post('/users/register', userData),\n  // 로그인\n  login: credentials => api.post('/users/login', credentials),\n  // 사용자 목록 조회\n  getUsers: () => api.get('/users')\n};\n\n// 예약 관련 API\nexport const createBooking = async bookingData => {\n  try {\n    console.log('예약 데이터 전송:', bookingData);\n    const response = await api.post('/bookings', bookingData);\n    console.log('예약 생성 응답:', response.data);\n    return response.data;\n  } catch (error) {\n    var _error$response2;\n    console.error('예약 생성 오류:', ((_error$response2 = error.response) === null || _error$response2 === void 0 ? void 0 : _error$response2.data) || error.message);\n    throw error;\n  }\n};\nexport const getBookings = async () => {\n  try {\n    const response = await api.get('/bookings');\n    return response.data;\n  } catch (error) {\n    var _error$response3;\n    console.error('예약 조회 오류:', ((_error$response3 = error.response) === null || _error$response3 === void 0 ? void 0 : _error$response3.data) || error.message);\n    throw error;\n  }\n};\n\n// 예약 수정\nexport const updateBooking = (id, bookingData) => api.put(`/bookings/${id}`, bookingData);\n\n// 예약 삭제\nexport const deleteBooking = id => api.delete(`/bookings/${id}`);\n\n// 객실 관련 API\nexport const getRooms = async () => {\n  try {\n    const response = await api.get('/rooms');\n    return response.data;\n  } catch (error) {\n    var _error$response4;\n    console.error('객실 조회 오류:', ((_error$response4 = error.response) === null || _error$response4 === void 0 ? void 0 : _error$response4.data) || error.message);\n    throw error;\n  }\n};\n\n// 갤러리 관련 API\nexport const getGallery = async () => {\n  try {\n    const response = await api.get('/gallery');\n    return response.data;\n  } catch (error) {\n    var _error$response5;\n    console.error('갤러리 조회 오류:', ((_error$response5 = error.response) === null || _error$response5 === void 0 ? void 0 : _error$response5.data) || error.message);\n    throw error;\n  }\n};\nexport default api;","map":{"version":3,"names":["axios","API_BASE_URL","process","env","REACT_APP_API_URL","api","create","baseURL","headers","interceptors","request","use","config","token","localStorage","getItem","Authorization","error","Promise","reject","response","_error$response","status","removeItem","window","location","href","userAPI","register","userData","post","login","credentials","getUsers","get","createBooking","bookingData","console","log","data","_error$response2","message","getBookings","_error$response3","updateBooking","id","put","deleteBooking","delete","getRooms","_error$response4","getGallery","_error$response5"],"sources":["C:/code/booking/client/src/services/api.js"],"sourcesContent":["import axios from 'axios';\r\n\r\n// API 기본 URL (서버 포트로 변경)\r\nconst API_BASE_URL = process.env.REACT_APP_API_URL || 'http://localhost:5000/api';\r\n\r\n// axios 인스턴스 생성\r\nconst api = axios.create({\r\n  baseURL: API_BASE_URL,\r\n  headers: {\r\n    'Content-Type': 'application/json',\r\n  },\r\n});\r\n\r\n// 요청 인터셉터 (토큰 추가)\r\napi.interceptors.request.use(\r\n  (config) => {\r\n    const token = localStorage.getItem('token');\r\n    if (token) {\r\n      config.headers.Authorization = `Bearer ${token}`;\r\n    }\r\n    return config;\r\n  },\r\n  (error) => {\r\n    return Promise.reject(error);\r\n  }\r\n);\r\n\r\n// 응답 인터셉터 (에러 처리)\r\napi.interceptors.response.use(\r\n  (response) => response,\r\n  (error) => {\r\n    if (error.response?.status === 401) {\r\n      localStorage.removeItem('token');\r\n      localStorage.removeItem('user');\r\n      window.location.href = '/login';\r\n    }\r\n    return Promise.reject(error);\r\n  }\r\n);\r\n\r\n// 사용자 관련 API\r\nexport const userAPI = {\r\n  // 회원가입\r\n  register: (userData) => api.post('/users/register', userData),\r\n  \r\n  // 로그인\r\n  login: (credentials) => api.post('/users/login', credentials),\r\n  \r\n  // 사용자 목록 조회\r\n  getUsers: () => api.get('/users'),\r\n};\r\n\r\n// 예약 관련 API\r\nexport const createBooking = async (bookingData) => {\r\n  try {\r\n    console.log('예약 데이터 전송:', bookingData);\r\n    const response = await api.post('/bookings', bookingData);\r\n    console.log('예약 생성 응답:', response.data);\r\n    return response.data;\r\n  } catch (error) {\r\n    console.error('예약 생성 오류:', error.response?.data || error.message);\r\n    throw error;\r\n  }\r\n};\r\n\r\nexport const getBookings = async () => {\r\n  try {\r\n    const response = await api.get('/bookings');\r\n    return response.data;\r\n  } catch (error) {\r\n    console.error('예약 조회 오류:', error.response?.data || error.message);\r\n    throw error;\r\n  }\r\n};\r\n\r\n// 예약 수정\r\nexport const updateBooking = (id, bookingData) => api.put(`/bookings/${id}`, bookingData);\r\n\r\n// 예약 삭제\r\nexport const deleteBooking = (id) => api.delete(`/bookings/${id}`);\r\n\r\n// 객실 관련 API\r\nexport const getRooms = async () => {\r\n  try {\r\n    const response = await api.get('/rooms');\r\n    return response.data;\r\n  } catch (error) {\r\n    console.error('객실 조회 오류:', error.response?.data || error.message);\r\n    throw error;\r\n  }\r\n};\r\n\r\n// 갤러리 관련 API\r\nexport const getGallery = async () => {\r\n  try {\r\n    const response = await api.get('/gallery');\r\n    return response.data;\r\n  } catch (error) {\r\n    console.error('갤러리 조회 오류:', error.response?.data || error.message);\r\n    throw error;\r\n  }\r\n};\r\n\r\nexport default api; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}